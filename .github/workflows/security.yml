name: Security Scanning

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static security analysis
  bandit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run Bandit security scan
        run: |
          bandit -r syntha/ -f json -o bandit-report.json || true
          bandit -r syntha/ -f txt

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json

  # Dependency vulnerability scanning
  safety:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Safety
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Install project dependencies
        run: |
          pip install -r requirements-test.txt
          pip install -e .

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-results
          path: safety-report.json

  # Semgrep static analysis
  semgrep:
    runs-on: ubuntu-latest
    name: Semgrep Security Scan
    steps:
      - uses: actions/checkout@v5

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Semgrep Info
        run: |
          echo "## 🔍 Semgrep Security Scanning" >> $GITHUB_STEP_SUMMARY
          echo "If Semgrep failed, you can optionally configure it:" >> $GITHUB_STEP_SUMMARY
          echo "1. Sign up at semgrep.dev (free for open source)" >> $GITHUB_STEP_SUMMARY
          echo "2. Connect your repository and get a token" >> $GITHUB_STEP_SUMMARY
          echo "3. Add SEMGREP_APP_TOKEN to repository secrets" >> $GITHUB_STEP_SUMMARY
          echo "Note: Other security tools (Bandit, CodeQL, Safety) are still running!" >> $GITHUB_STEP_SUMMARY

  # CodeQL analysis
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          pip install -e .

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Secrets scanning
  secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run TruffleHog (Pull Request)
        if: github.event_name == 'pull_request'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          extra_args: --debug --only-verified

      - name: Run TruffleHog (Push/Schedule/Manual)
        if: github.event_name != 'pull_request'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified

  # License compliance
  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-licenses
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Install project dependencies
        run: |
          pip install -r requirements-test.txt
          pip install -e .

      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=plain-vertical
          
          # Check for problematic licenses
          pip-licenses --fail-on="GPL;AGPL;LGPL" --format=plain-vertical || {
            echo "❌ Found problematic licenses"
            exit 1
          }

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: licenses.json

  # Docker security scanning (if Dockerfile exists)
  docker-security:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v5

      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        run: |
          docker build -t syntha-security-scan .

      - name: Run Trivy vulnerability scanner
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'syntha-security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Security summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [bandit, safety, semgrep, codeql, secrets, license-check]
    if: always()
    steps:
      - name: Security Scan Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Bandit | ${{ needs.bandit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Safety | ${{ needs.safety.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep | ${{ needs.semgrep.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secrets.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Review security findings in the Security tab**" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Download detailed reports from workflow artifacts**" >> $GITHUB_STEP_SUMMARY 