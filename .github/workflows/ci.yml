name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install PostgreSQL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install postgresql@15
          echo "$(brew --prefix postgresql@15)/bin" >> $GITHUB_PATH
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
        env:
          # Ensure pg_config is available on macOS
          PATH: ${{ matrix.os == 'macos-latest' && '/opt/homebrew/opt/postgresql@15/bin:/usr/local/opt/postgresql@15/bin:' || '' }}${{ env.PATH }}

      - name: Install test requirements
        run: |
          pip install -r requirements-test.txt
        continue-on-error: true

      - name: Install test requirements (fallback)
        if: ${{ failure() }}
        run: |
          echo "Requirements installation failed, trying without psycopg2-binary..."
          pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-benchmark pytest-xdist coverage factory-boy faker freezegun responses redis
          pip install black isort flake8 mypy bandit types-requests types-psycopg2

      - name: Install PostgreSQL driver (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pip install psycopg2-binary --no-cache-dir --force-reinstall || echo "psycopg2-binary installation failed, PostgreSQL tests will be skipped"
        env:
          PATH: /opt/homebrew/opt/postgresql@15/bin:/usr/local/opt/postgresql@15/bin:${{ env.PATH }}

      - name: Install PostgreSQL driver (non-macOS)
        if: matrix.os != 'macos-latest'
        run: |
          pip install psycopg2-binary || echo "psycopg2-binary installation failed, PostgreSQL tests will be skipped"

      - name: Lint with flake8
        run: |
          flake8 syntha tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 syntha tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: |
          python -m black --check syntha tests

      - name: Import sorting check with isort
        run: |
          python -m isort --check-only syntha tests

      - name: Type checking with mypy
        run: |
          python -m mypy syntha

      - name: Security check with bandit
        run: |
          python -m bandit -r syntha

      - name: Test with pytest
        run: |
          pytest tests/ -v --cov=syntha --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Clean up test artifacts
        shell: bash
        run: |
          git checkout -- syntha_context.db 2>/dev/null || true
          git checkout -- . 2>/dev/null || true
          git clean -fd 2>/dev/null || true

  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: syntha_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          # Install requirements with retry logic for psycopg2-binary on macOS
          pip install -r requirements-test.txt || (
            echo "Requirements installation failed, trying without psycopg2-binary..."
            pip install -r <(grep -v "psycopg2-binary" requirements-test.txt)
            # Try installing psycopg2-binary with specific options for macOS
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              pip install psycopg2-binary --no-cache-dir --force-reinstall || echo "psycopg2-binary installation failed, PostgreSQL tests will be skipped"
            else
              pip install psycopg2-binary
            fi
          )

      - name: Run integration tests
        env:
          POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/syntha_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/ -v --cov=syntha

      - name: Clean up test artifacts
        shell: bash
        run: |
          git checkout -- syntha_context.db 2>/dev/null || true
          git checkout -- . 2>/dev/null || true
          git clean -fd 2>/dev/null || true

  performance-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pytest-benchmark

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
          echo "Benchmark file created:"
          ls -la benchmark.json || echo "Warning: benchmark.json not found after tests"

      - name: Clean up uncommitted changes before benchmark storage
        shell: bash
        run: |
          # Remove any generated database files
          rm -f syntha_context.db syntha_context.db-* *.db 2>/dev/null || true
          # Reset any tracked file changes
          git checkout -- syntha_context.db 2>/dev/null || true
          git checkout -- . 2>/dev/null || true
          # Clean untracked files and directories (preserve benchmark.json)
          git clean -fd -e benchmark.json 2>/dev/null || true
          # Show final status for debugging
          echo "Git status after cleanup:"
          git status
          echo "Benchmark file status:"
          ls -la benchmark.json 2>/dev/null || echo "benchmark.json not found"

      - name: Store benchmark results
        if: success() && hashFiles('benchmark.json') != '' && github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: "pytest"
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: "200%"
          comment-on-alert: true
          fail-on-alert: true
          benchmark-data-dir-path: dev/bench
          gh-pages-branch: gh-pages


